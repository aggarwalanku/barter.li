require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe PostsController do

  before(:each) do
    @user = FactoryGirl.create(:user) 
    sign_in @user 
    @group = @user.groups.create(:title => "rails")
  end

  # This should return the minimal set of attributes required to create a valid
  # Post. As you add validations to Post, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "title" => "test", "body" => "Hello" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PostsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns group public posts as @posts" do
      @member = @group.members.create!(:user_id => @user.id, :status => 1)
      @group.posts.delete_all
      post = @user.posts.create! valid_attributes.merge!(:group_id => @group.id, :group_id => @group.id, :publish_type => Code[:publish_type][:public])
      get :index, {:group_id => @group.id}
      assigns(:posts).should eq([post])
    end
  

   it "assigns group public and private posts as @posts" do
      @group.posts.delete_all
      @user2 = FactoryGirl.create(:user) 
      @user2.posts.create! valid_attributes.merge!(:group_id => @group.id, :publish_type => Code[:publish_type][:private])
      @member = @group.members.create!(:user_id => @user2.id, :status => 1)
      @user.posts.create! valid_attributes.merge!(:group_id => @group.id, :publish_type => Code[:publish_type][:public])
      get :index, {:group_id => @group.id}
      assigns(:posts).count.should eq(1)
    end

    it "members can see all private group posts" do
      @group.posts.delete_all
      @user2 = FactoryGirl.create(:user) 
      @user2.posts.create! valid_attributes.merge!(:group_id => @group.id, :publish_type => Code[:publish_type][:private])
      @member = @group.members.create!(:user_id => @user2.id, :status => 1)
      @member = @group.members.create!(:user_id => @user.id, :status => 1)
      @user.posts.create! valid_attributes.merge!(:group_id => @group.id, :publish_type => Code[:publish_type][:public])
      get :index, {:group_id => @group.id}
      assigns(:posts).count.should eq(2)
    end
  end

  describe "GET show" do
    it "assigns the requested post as @post" do
      post = @group.posts.create! valid_attributes.merge!(:user_id => @user.id)
      get :show, {:id => post.to_param, :group_id => @group.id }
      assigns(:post).should eq(post)
    end
  end

  describe "GET new" do
    it "assigns a new post as @post" do
      get :new, {:group_id => @group.id}
      assigns(:post).should be_a_new(Post)
    end
  end

  describe "GET edit" do
    it "assigns the requested post as @post" do
      post = @group.posts.create! valid_attributes.merge!(:user_id => @user.id)
      get :edit, {:id => post.to_param, :group_id => @group.id}
      assigns(:post).should eq(post)
    end
  end

  describe "POST create" do
    before(:each) do
     @member = @group.members.create!(:user_id => @user.id, :status => 1)
    end
    describe "with valid params" do
      it "creates a new Post" do
        expect {
          post :create, {:post => valid_attributes, :group_id => @group.id}
        }.to change(Post, :count).by(1)
      end

      it "assigns a newly created post as @post" do
        post :create, {:post => valid_attributes, :group_id => @group.id}
        assigns(:post).should be_a(Post)
        assigns(:post).should be_persisted
      end

      it "redirects to the created post" do
        post :create, {:post => valid_attributes, :group_id => @group.id}
        response.should redirect_to([@group,Post.last])
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved post as @post" do
        # Trigger the behavior that occurs when invalid params are submitted
        Post.any_instance.stub(:save).and_return(false)
        post :create, {:post => valid_attributes, :group_id => @group.id}
        assigns(:post).should be_a_new(Post)
      end

      it "raise unautherized if user is not member of the group" do
        @group.members.delete_all
        expect {
        post :create, {:post => valid_attributes, :group_id => @group.id}
        }.to raise_error
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Post.any_instance.stub(:save).and_return(false)
        post :create, {:post => valid_attributes, :group_id => @group.id}
        response.should render_template("new")
      end
    end
   end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested post" do
        post = @user.posts.create! valid_attributes
        # Assuming there are no other posts in the database, this
        # specifies that the Post created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Post.any_instance.should_receive(:update).with({ "title" => "test" })
        put :update, {:id => post.to_param, :post => { "title" => "test" }, :group_id => @group.id}
      end

      it "assigns the requested post as @post" do
        post = @user.posts.create! valid_attributes
        put :update, {:id => post.to_param, :post => valid_attributes, :group_id => @group.id}
        assigns(:post).should eq(post)
      end

      it "redirects to the post" do
        post = @user.posts.create! valid_attributes
        put :update, {:id => post.to_param, :post => valid_attributes, :group_id => @group.id}
        response.should redirect_to([@group, post])
      end
    end

    describe "with invalid params" do
      it "assigns the post as @post" do
        post = @user.posts.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Post.any_instance.stub(:save).and_return(false)
        put :update, {:id => post.to_param, :post => { "title" => "invalid value" }, :group_id => @group.id}
        assigns(:post).should eq(post)
      end

      it "re-renders the 'edit' template" do
        post = @user.posts.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Post.any_instance.stub(:save).and_return(false)
        put :update, {:id => post.to_param, :post => { "title" => "invalid value" }, :group_id => @group.id}
        response.should render_template("edit")
      end
    end
   end

  # describe "DELETE destroy" do
  #   it "destroys the requested post" do
  #     post = Post.create! valid_attributes
  #     expect {
  #       delete :destroy, {:id => post.to_param}
  #     }.to change(Post, :count).by(-1)
  #   end

  #   it "redirects to the posts list" do
  #     post = Post.create! valid_attributes
  #     delete :destroy, {:id => post.to_param}
  #     response.should redirect_to(posts_url)
  #   end
  # end

end
